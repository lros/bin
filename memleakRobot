#!/usr/bin/env python3

# Reproduce the memory leak of Bugzilla bug 19483
# Modified for use on a real robot.

import re
#import pexpect as expect
import socket
import time
import subprocess
import sys

class Arcl:
  def __init__(self, ip, port=None):
    if port is None: port = 7171
    self.ip = (ip, port)
    # debug spew
    self.spew = False
    # log all data sent & received
    self.commLog = None
    # Remaining line fragment at end of last packet, string
    self.fragment = ''
    # Remaining lines after a match, list of strings
    self.lines = []

  p_pw = re.compile('Enter password:')
  def connect(self, password, timeout=1.0):
    self.sock = socket.socket()
    self.sock.connect(self.ip)
    self.expect([self.p_pw], timeout)
    self.send(password)

  def send(self, text):
    if self.commLog:
      print("--> " + text, file=self.commLog)
    text += '\r\n'
    self.sock.send(text.encode('ascii'))

  # Read one packet or time out. Return list of strings, one per line.
  def _readLines(self, timeout):
    self.sock.settimeout(timeout)
    try:
      data = self.sock.recv(8096)
    except socket.timeout:
      if self.spew: print('_readLines: socket timed out')
      return []
    if self.spew: print('_readLines: got {} bytes'.format(len(data)))
    # convert data to list of lines
    lines = list()
    start = 0
    for i in range(len(data)):
      # 13 == \r; assume \r is always followed by \n.
      if data[i] == 13:
        lines.append(data[start:i].decode('ascii'))
        start = i + 2
    # TODO  This scheme fails if end of packet occurs between \r and \n.
    # Prepend any fragmentary line from previous packet.
    if len(lines) > 0 and len(self.fragment) > 0:
      lines[0] = self.fragment + lines[0]
      self.fragment = ''
    # Hold on to any remaining fractional line at end of packet.
    if start < len(data):
      self.fragment += data[start:].decode('ascii')
    if self.commLog:
      for line in lines:
        print("<-- " + line, file=self.commLog)
    return lines

  # Read lines until one of the patterns matches, or timeout expires.
  # Leave the pattern that matched on self.matchedPattern and the
  # re.MatchObject on self.matchObject.
  def expect(self, patterns, timeout):
    self.matchedPattern = None
    self.matchObject = None
    now = time.perf_counter()
    expiration = now + timeout
    while now < expiration:
      if len(self.lines) > 0:
        lines = self.lines
        self.lines = []
      else:
        lines = self._readLines(expiration - now)
      for n, line in enumerate(lines):
        for pat in patterns:
          matchobj = pat.match(line)
          if (matchobj):
            self.matchedPattern = pat
            self.matchObject = matchobj
            if self.spew:
              print('"{}" matched "{}"'.format(line, pat))
            # Hold on to any remaining lines.
            self.lines = lines[n + 1:]
            return
      now = time.perf_counter()
    raise RuntimeError('ARCL timeout.')

class EmArcl(Arcl):
  def __init__(self, ip, port=None):
    super().__init__(ip, port)

  p_queued = re.compile('QueueUpdate:.*Pending')
  p_completed = re.compile('QueueUpdate:.*Completed')
  def queuePickup(self, goal, timeout):
    self.send("queuePickup " + goal)
    self.expect([self.p_queued], 1.0)
    self.expect([self.p_completed], timeout)

  # This is for a robot, not EM
  p_going = re.compile('Going to ')
  p_arrived = re.compile('Arrived at ')
  p_failed = re.compile('Error: Failed going to goal')
  def gotoGoal(self, goal, timeout):
    self.send("GoTo " + goal)
    self.expect([self.p_going], 1.0)
    self.expect([self.p_arrived, self.p_failed], timeout)
    if self.matchObject == self.p_failed:
      print('Failed gotoGoal ' + goal)

  # This is for a robot, not EM
  #p_going = re.compile('Going to point ')
  #p_arrived = re.compile('Arrived at point ')
  def gotoPoint(self, x, y, th, timeout):
    self.send("GoToPoint {} {} {}".format(x, y, th))
    self.expect([self.p_going], 1.0)
    self.expect([self.p_arrived, self.p_failed], timeout)
    if self.matchObject == self.p_failed:
      print('Failed gotoPoint {} {} {}'.format(x, y, th))

  p_status = re.compile('QueueRobot: "Sim43"')
  p_parked = re.compile('QueueRobot: "Sim43" Available Parked')

  def waitParked(self, timeout):
    now = time.perf_counter()
    expiration = now + timeout
    while now < expiration:
      time.sleep(2)
      self.send("queueShowRobot Sim43")
      self.expect([self.p_parked, self.p_status], 1.0)
      if self.matchedPattern is self.p_parked:
        if self.spew: print('Parked')
        return True
      now = time.perf_counter()
    return False

  # Return the current map file.
  p_map = re.compile(r'GetConfigSectionValue: Map (.*)')
  p_configEnd = re.compile('EndOfGetConfigSectionValues')
  def getMap(self):
    self.send('getConfigSectionValues Files')
    theMap = None
    while True:
      self.expect([self.p_map, self.p_configEnd], 1.0)
      if self.matchedPattern is self.p_configEnd:
        break
      if self.matchedPattern is self.p_map:
        theMap = self.matchObject.group(1)
    if theMap is None:
      raise RuntimeError('No map property.')
    return theMap

  p_configChanged = re.compile('Configuration changed')
  def setMap(self, theMap):
    self.send('ConfigStart')
    self.send('ConfigAdd Section Files')
    self.send('ConfigAdd Map ' + theMap)
    self.send('ConfigAdd Section Path Planning Settings')
    self.send('ConfigAdd PlanRes 20.0')
    self.send('ConfigParse')
    self.expect([self.p_configChanged], 5.0)

# Run command as root on host ip, returning stdout as a list of lines.
def sshCmd(ip, command):
  cmdList = ['sshpass', '-proot', 'ssh', 'root@' + ip, command]
  ran = subprocess.run(cmdList,
    stdout=subprocess.PIPE,
    stderr=subprocess.DEVNULL,
    check=True)
  return ran.stdout.decode('ascii').split('\n')

# return the PID of aramServer as a string, or None
p_PID = re.compile('[0-9]+$')
def aramServerPID(ip):
  progs = [
    'aramServer' + sound + pylon
    for sound in ('Cepstral', '')
    for pylon in ('', 'Pylon')
  ]
  for prog in progs:
    try:
      lines = sshCmd(ip, "pidof " + prog)
    except subprocess.CalledProcessError:
      continue
    if p_PID.match(lines[0]):
      return lines[0]
  return None

# Return aramServer process size, data size, stack size in kB as a tuple.
cachedPID = None
def getMemInfo(ip):
  global cachedPID
  for attempt in range(2):
    if cachedPID is None:
      cachedPID = aramServerPID(ip)
    try:
      lines = sshCmd(ip, "cat /proc/" + cachedPID + "/status")
    except subprocess.CalledProcessError:
      if attempt == 0:
        print('cached PID {} did not work.'.format(cachedPID))
        cachedPID = None
        continue
      raise
    break
  vmsize = None
  vmdata = None
  vmstk = None
  for line in lines:
    words = line.split()
    if (len(words) < 2): continue
    if words[0] == "VmSize:": vmsize = words[1]
    elif words[0] == "VmData:": vmdata = words[1]
    elif words[0] == "VmStk:": vmstk = words[1]
  lines = sshCmd(ip, "cat /proc/meminfo")
  free = None
  for line in lines:
    words = line.split()
    if (len(words) < 2): continue
    if words[0] == "MemFree:":
      free = words[1]
      break
  return (vmsize, vmdata, vmstk, free)

p_endCmds = re.compile('End of commands')

#memLog = sys.stdout
memLog = open('memory.log', 'w')
def logMem(tag, robotIP):
  elements = getMemInfo(robotIP)
  print("{:>6}  {:>7}  {:>7}  {:>7}  {:>7}".format(tag, *elements), file=memLog)

def changeMapAndPlan(emIP, robotIP):
  emArcl = EmArcl(emIP)
  #emArcl.spew = True
  emArcl.connect('arcl')
  emArcl.expect([p_endCmds], 2.0)
  logMem("before", robotIP)
  oldMap = emArcl.getMap()
  if oldMap == 'sample_large.map':
    newMap = 'sample_large_1.map'
  else:
    newMap = 'sample_large.map'
  print("Changing map from {} to {}".format(oldMap, newMap))
  emArcl.setMap(newMap)
  print('Give the robot a chance to change maps.')
  time.sleep(10)
  newMap = emArcl.getMap()
  print('Confirm: new map is ' + newMap)
  logMem("newMap", robotIP)
  print('Send robot to P1.')
  emArcl.queuePickup('P1', 30)
  logMem("goto", robotIP)
  print('Wait for robot to park.')
  emArcl.waitParked(30)
  logMem("park", robotIP)

#for i in range(10):
#  changeMapAndPlan(str(emIP), str(robotIP))

robotIP = '10.151.193.177'
map1 = 'common-new.map'
map2 = 'common-new_MocapShift.map'

robot = EmArcl(robotIP)
#robot.commLog = sys.stdout
robot.commLog = open('arcl.log', 'w')
robot.connect('adept')
robot.expect([p_endCmds], 2.0)

for i in range(50):
  logMem("before", robotIP)
  oldMap = robot.getMap()
  if oldMap == map1:
    newMap = map2
  else:
    newMap = map1
  print("Changing map from {} to {}".format(oldMap, newMap))
  robot.setMap(newMap)
  print('Give the robot a chance to change maps.')
  time.sleep(5)
  newMap = robot.getMap()
  print('Confirm: new map is ' + newMap)
  logMem("newMap", robotIP)
  robot.gotoGoal('RD1', 45)
  logMem("goal", robotIP)
  #robot.gotoPoint(1950, -3550, 100, 30)
  robot.gotoPoint(1950, -3550, '', 45)
  logMem("point", robotIP)

